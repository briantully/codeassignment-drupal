<?php

define('CA_REWRITE_URI_PATH', 'admin/structure/ca_rewrite');

/**
 * Implements hook_filter_info().
 */
function ca_rewrite_filter_info() {
  $filters['rewrite'] = array(
    'title' => t('CA Rewrite filter'),
    'description' => t('Ensure content meets CA Standards'),
    'process callback' => 'ca_rewrite_filter_process',
    'cache' => FALSE,
  );
  return $filters;
}

/**
 * Filter process callback for CA Rewrite filter.
 */
function ca_rewrite_filter_process($text) {
  // Most of the following code is taken from Drupal core's Filter module
  // in order to exclude text within tags, such as URLs that might get
  // modified using the replacement patterns.
  $ignore_tags = 'a|script|style|code|pre';
  $open_tag = '';
  $chunks = preg_split('/(<.+?>)/is', $text, -1, PREG_SPLIT_DELIM_CAPTURE);

  $patterns = ca_rewrite_patterns();

  foreach ($patterns as $pattern_search => $pattern_replace) {
    $chunk_type = 'text';
    for ($i = 0; $i < count($chunks); $i++) {
      if ($chunk_type == 'text') {
        // Only process this text if there are no unclosed $ignore_tags.
        if ($open_tag == '') {
          // If there is a match, inject a link into this chunk via the callback
          // function contained in $task.
          $chunks[$i] = preg_replace($pattern_search, $pattern_replace, $chunks[$i]);
        }
        // Text chunk is done, so next chunk must be a tag.
        $chunk_type = 'tag';
      }
      else {
        // Only process this tag if there are no unclosed $ignore_tags.
        if ($open_tag == '') {
          // Check whether this tag is contained in $ignore_tags.
          if (preg_match("`<($ignore_tags)(?:\s|>)`i", $chunks[$i], $matches)) {
            $open_tag = $matches[1];
          }
        }
        // Otherwise, check whether this is the closing tag for $open_tag.
        else {
          if (preg_match("`<\/$open_tag>`i", $chunks[$i], $matches)) {
            $open_tag = '';
          }
        }
        // Tag chunk is done, so next chunk must be text.
        $chunk_type = 'text';
      }
    }
    $text = implode($chunks);
  }
  return $text;
}

// !NOTES ON CHANGES
// FIXME: (btully)
/**
 * Switch from hook_node_view_alter() to hook_node_presave()
 *
 * The ca_rewrite_filter_process gets run on each node load from within the
 * views which is expensive on the homepage since it does this on the render
 * side after the node is loaded. Since we are only changing the title, why not
 * filter/change it at the time of import/update and store it directly in the
 * database? Doing so should be more performant and leverage better caching
 * strategies.
 */

/**
 * Implements hook_node_view_alter().
 */
/*
function ca_rewrite_node_view_alter(&$build) {
  // Node title is not run through text formats, so replace contents here.
  $build['#node']->title = ca_rewrite_filter_process($build['#node']->title);
}
*/

// TODO: (btully) ensure the proper filtering is occuring during feed imports
// and confirm that hash check for feed importer doesn't falsely identify
// updated node title as a diff, i.e., we don't want to import the same feed
// item more than once.
/**
 * Implements hook_node_presave().
 */
function ca_rewrite_node_presave($node) {
  if ($node->type == 'feed_item') {
    // Alter title, add time stamp at the end of title:
    $node->title = ca_rewrite_filter_process($node->title);
  }
}

/**
 * Pattern definition.
 */
function ca_rewrite_patterns() {
  $pattern_matches = array();

  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'ca_rewrite_pattern')
        ->addMetaData('account', user_load(1, TRUE));
  // Run the query as user 1.
  $results = $query->execute();

  foreach ($results['ca_rewrite_pattern'] as $result) {
    $pattern = ca_rewrite_pattern_load($result->eid);
    $pattern_matches = array($pattern->pattern => $pattern->replacement);
  }

  return $pattern_matches;
}

/**
 * Implements hook_entity_info().
 */
function ca_rewrite_entity_info() {
  return array(
    'ca_rewrite_pattern' => array(
      'label' => t('Rewrite Pattern'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'ca_rewrite_pattern',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'eid',
        'label' => 'description',
      ),
      'admin ui' => array(
        'path' => CA_REWRITE_URI_PATH,
        'file' => 'ca_rewrite.admin.inc',
      ),
      'access callback' => 'ca_rewrite_pattern_access',
      'module' => 'ca_rewrite',
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
    ),
  );
}

/**
 * Access callback for the entity API.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $eid
 *   (optional) A embedcode to check access for. If nothing is given, access for
 *   all profiles is determined.
 * @param $account
 *   (optional) The user to check for. Leave it to NULL to check for the global user.
 *
 * @return boolean
 *   Whether access is allowed or not.
 */
function ca_rewrite_pattern_access($op, $eid = NULL, $account = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }
  switch ($op) {
    case 'create':
      return user_access('create rewrite pattern', $account);

    case 'view':
      return user_access('view rewrite pattern', $account);

    case 'update':
      return user_access('edit rewrite pattern', $account);
  }
}

/**
 * Implements hook_permission().
 */
function ca_rewrite_permission() {
  $permissions = array(
    'create rewrite pattern' => array(
      'title' => t('Create Rewrite Pattern'),
      'description' => t('Allows users to create Rewrite Pattern.'),
      'restrict access' => TRUE,
    ),
    'view rewrite pattern' => array(
      'title' => t('View Rewrite Pattern'),
      'description' => t('Allows users to view Rewrite Pattern.'),
      'restrict access' => TRUE,
    ),
    'edit rewrite pattern' => array(
      'title' => t('Edit Rewrite Pattern'),
      'description' => t('Allows users to edit any Rewrite Pattern.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}

function ca_rewrite_pattern_load($eid, $reset = FALSE) {
  $patterns = ca_rewrite_pattern_load_multiple(array($eid), array(), $reset);
  return reset($patterns);
}

function ca_rewrite_pattern_load_multiple($eids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('ca_rewrite_pattern', $eids, $conditions, $reset);
}

function ca_rewrite_pattern_save($pattern) {
  entity_save('ca_rewrite_pattern', $pattern);
  field_cache_clear();
}

function ca_rewrite_pattern_delete($pattern) {
  entity_delete('ca_rewrite_pattern', entity_id('ca_rewrite_pattern', $pattern));
}

function ca_rewrite_pattern_delete_multiple($eids) {
  entity_delete_multiple('ca_rewrite_pattern', $eids);
}
